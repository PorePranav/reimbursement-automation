generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                          String          @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  email                       String          @unique
  password                    String
  role                        Role            @default(USER)
  phone                       String?
  userCategory                UserCategory
  passwordChangedAt           DateTime?
  passwordResetToken          String?
  passwordResetTokenExpiresAt DateTime?
  isVerified                  Boolean         @default(false)
  verificationToken           String?
  isKycComplete               Boolean         @default(false)
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  KYC                         Kyc?
  validatedForms              ExpensesForm[]  @relation("form_validator")
  expensesForms               ExpensesForm[]
  expenseClaims               ExpenseClaims[]

  @@unique([email, phone])
  @@index([phone], name: "phone_index")
}

model Event {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  location           String
  submissionDeadline DateTime
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  expensesForms      ExpensesForm[]
}

model ExpensesForm {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  eventId             String          @db.ObjectId
  event               Event           @relation(fields: [eventId], references: [id])
  userId              String          @db.ObjectId
  user                User            @relation(fields: [userId], references: [id])
  memberCategory      MemberCategory
  costCenter          CostCenter?
  sanctionStatus      SanctionStatus  @default(PENDING)
  reasonForRejection  String?
  voucherNumber       String?
  reimbursementDate   DateTime?
  bankReferenceNumber String?
  totalClaimAmount    Float
  expensesClaims      ExpenseClaims[]
  validatedBy         String?         @db.ObjectId
  validator           User?           @relation(fields: [validatedBy], references: [id], name: "form_validator")
  validatedAt         DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model ExpenseClaims {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  userId           String           @db.ObjectId
  user             User             @relation(fields: [userId], references: [id])
  expensesFormId   String           @db.ObjectId
  expensesForm     ExpensesForm     @relation(fields: [expensesFormId], references: [id])
  date             DateTime
  amount           Float
  remarks          String?
  expenseClaimType ExpenseClaimType
  billUrl          String
}

model Kyc {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @unique @db.ObjectId
  user            User        @relation(fields: [userId], references: [id])
  bankAccountName String
  accountType     AccountType
  accountNumber   String
  bankName        String
  bankAddress     String
  ifscCode        String
}

enum ExpenseClaimType {
  FOOD
  ACCOMODATION
  LOCALTRANSPORT
  REGISTRATIONSCERTIFICATIONS
  STATIONARYGIVEAWAYS
  HONARARIUMTA
  HONARARIUMCOORDINATORS
  HONARARIUMOTHERS
  OTHERS
}

enum AccountType {
  SAVINGS
  CURRENT
}

enum Role {
  ADMIN
  OPERATOR
  USER
}

enum UserCategory {
  INDIVIDUAL
  VENDOR
  NA
}

enum MemberCategory {
  COUNCILMEMBER
  CHAPTERREP
  EVENTORG
  SPEAKER
  INVITEE
  DELEGATE
  OTHERS
}

enum SanctionStatus {
  PENDING
  APPROVED
  REIMBURSED
  REJECTED
}

enum CostCenter {
  EXECOM
  ACMIW
  EDUCATION
  RFC
  AWARDS
  MEMBERSCHAPTERS
  COMMUNICATION
  CONFERENCES
  EXTENG
}
